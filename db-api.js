// db-api.js - –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç—å—é

// –ë–∞–∑–æ–≤—ã–π URL API
const API_URL = 'http://localhost:3000/api';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function apiRequest(endpoint, method = 'GET', data = null) {
  const url = `${API_URL}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json'
    }
  };
  
  if (data) {
    options.body = JSON.stringify(data);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  const token = sessionStorage.getItem('adminToken');
  if (token) {
    options.headers['Authorization'] = `Bearer ${token}`;
  }
  
  try {
    const response = await fetch(url, options);
    
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –û–ö, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`API Error (${endpoint}):`, error);
    throw error;
  }
}

// Telegram notification function (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function sendTelegramNotification(botToken, chatId, message) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
  if (!botToken || !chatId || !message) {
    console.error('Missing required parameters for Telegram notification');
    return false;
  }
  
  // –°–æ–∑–¥–∞–µ–º URL API —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
  const apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
  const requestData = {
    chat_id: chatId,
    text: message,
    parse_mode: 'HTML'
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º API –∑–∞–ø—Ä–æ—Å
  return fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(requestData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Telegram API response was not ok');
    }
    return response.json();
  })
  .then(data => {
    console.log('Telegram notification sent successfully:', data);
    return true;
  })
  .catch(error => {
    console.error('Error sending Telegram notification:', error);
    return false;
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function formatDateTime(dateTimeString) {
  const dateTime = new Date(dateTimeString);
  return dateTime.toLocaleString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = {
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
  restaurants: {
    getAll: async function() {
      return await apiRequest('/restaurants');
    },
    
    getActive: async function() {
      return await apiRequest('/restaurants/active');
    },
    
    getById: async function(id) {
      return await apiRequest(`/restaurants/${id}`);
    },
    
    add: async function(restaurant) {
      return await apiRequest('/restaurants', 'POST', restaurant);
    },
    
    update: async function(id, updatedRestaurant) {
      return await apiRequest(`/restaurants/${id}`, 'PUT', updatedRestaurant);
    },
    
    delete: async function(id) {
      return await apiRequest(`/restaurants/${id}`, 'DELETE');
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  categories: {
    getAll: async function() {
      return await apiRequest('/categories');
    },
    
    getActive: async function() {
      return await apiRequest('/categories/active');
    },
    
    getById: async function(id) {
      return await apiRequest(`/categories/${id}`);
    },
    
    add: async function(category) {
      return await apiRequest('/categories', 'POST', category);
    },
    
    update: async function(id, updatedCategory) {
      return await apiRequest(`/categories/${id}`, 'PUT', updatedCategory);
    },
    
    delete: async function(id) {
      return await apiRequest(`/categories/${id}`, 'DELETE');
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  products: {
    getAll: async function() {
      return await apiRequest('/products');
    },
    
    getById: async function(id) {
      return await apiRequest(`/products/${id}`);
    },
    
    getByRestaurant: async function(restaurantId) {
      return await apiRequest(`/products/restaurant/${restaurantId}`);
    },
    
    getByCategory: async function(categoryId) {
      return await apiRequest(`/products/category/${categoryId}`);
    },
    
    add: async function(product) {
      return await apiRequest('/products', 'POST', product);
    },
    
    update: async function(id, updatedProduct) {
      return await apiRequest(`/products/${id}`, 'PUT', updatedProduct);
    },
    
    delete: async function(id) {
      return await apiRequest(`/products/${id}`, 'DELETE');
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
  orders: {
    getAll: async function() {
      return await apiRequest('/orders');
    },
    
    getById: async function(id) {
      return await apiRequest(`/orders/${id}`);
    },
    
    getByRestaurant: async function(restaurantId) {
      return await apiRequest(`/orders/restaurant/${restaurantId}`);
    },
    
    add: async function(order) {
      return await apiRequest('/orders', 'POST', order);
    },
    
    update: async function(id, updatedOrder) {
      return await apiRequest(`/orders/${id}`, 'PUT', updatedOrder);
    },
    
    delete: async function(id) {
      return await apiRequest(`/orders/${id}`, 'DELETE');
    },
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    sendTelegramNotification: async function(order) {
      const settings = await db.settings.getAll();
      
      if (settings.telegramBotEnabled && settings.telegramBotToken && settings.telegramChatId) {
        console.log('Sending Telegram notification about new order:', order);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        const restaurant = await db.restaurants.getById(order.restaurantId).catch(() => ({ name: 'Unknown Restaurant' }));
        const orderItems = order.items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity}‚ÇΩ`).join('\n');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const message = `
<b>üîî NEW ORDER #${order.id}</b>

<b>Customer:</b> ${order.customerName}
<b>Phone:</b> ${order.customerPhone || 'Not provided'}
<b>Restaurant:</b> ${restaurant.name}
<b>Pickup Time:</b> ${order.pickupTime || order.deliveryTime || '30'} minutes
<b>Order Time:</b> ${formatDateTime(order.createdAt)}
<b>Total Amount:</b> ${order.totalAmount}‚ÇΩ

<b>Order Items:</b>
${orderItems}
        `.trim();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try {
          const success = await sendTelegramNotification(settings.telegramBotToken, settings.telegramChatId, message);
          
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
          localStorage.setItem('lastTelegramNotification', JSON.stringify({
            type: 'new_order',
            orderId: order.id,
            sentAt: new Date().toISOString(),
            success: success
          }));
          
          return success;
        } catch (error) {
          console.error('Error sending Telegram notification:', error);
          return false;
        }
      }
      
      return false;
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  settings: {
    getAll: async function() {
      return await apiRequest('/settings');
    },
    
    get: async function(key, defaultValue) {
      const settings = await this.getAll();
      return settings[key] !== undefined ? settings[key] : defaultValue;
    },
    
    update: async function(updatedSettings) {
      return await apiRequest('/settings', 'PUT', updatedSettings);
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  auth: {
    login: async function(username, password) {
      try {
        const response = await apiRequest('/auth/login', 'POST', { username, password });
        
        if (response.success && response.token) {
          sessionStorage.setItem('adminToken', response.token);
          return true;
        }
        
        return false;
      } catch (error) {
        console.error('Authentication error:', error);
        return false;
      }
    },
    
    logout: function() {
      sessionStorage.removeItem('adminToken');
      return true;
    },
    
    isAuthenticated: function() {
      return !!sessionStorage.getItem('adminToken');
    },
    
    updateCredentials: async function(username, password) {
      try {
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
        const settings = await db.settings.getAll();
        settings.adminCredentials = { username, password };
        await db.settings.update(settings);
        return true;
      } catch (error) {
        console.error('Error updating credentials:', error);
        return false;
      }
    }
  },
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã –æ—Å—Ç–∞–≤–ª—è–µ–º)
  cart: {
    get: function() {
      return JSON.parse(localStorage.getItem('cart') || '{"items":[], "restaurantId": null}');
    },
    
    addItem: async function(productId, quantity = 1) {
      const cart = this.get();
      
      try {
        const product = await db.products.getById(productId);
        
        if (!product) {
          return { success: false, error: 'Product not found' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        if (cart.restaurantId && product.restaurantIds && !product.restaurantIds.includes(cart.restaurantId)) {
          return { 
            success: false, 
            error: 'You can only add items from one restaurant at a time. Please clear your cart first.' 
          };
        }
        
        const existingItem = cart.items.find(item => item.productId === productId);
        
        if (existingItem) {
          existingItem.quantity += quantity;
        } else {
          cart.items.push({
            productId,
            name: product.name,
            price: product.price,
            quantity
          });
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
          if (!cart.restaurantId && product.restaurantIds && product.restaurantIds.length > 0) {
            cart.restaurantId = product.restaurantIds[0];
          }
        }
        
        localStorage.setItem('cart', JSON.stringify(cart));
        return { success: true, cart };
      } catch (error) {
        console.error('Error adding item to cart:', error);
        return { success: false, error: error.message };
      }
    },
    
    updateQuantity: function(productId, quantity) {
      const cart = this.get();
      const existingItemIndex = cart.items.findIndex(item => item.productId === productId);
      
      if (existingItemIndex === -1) {
        return { success: false, error: 'Item not found in cart' };
      }
      
      if (quantity <= 0) {
        cart.items.splice(existingItemIndex, 1);
      } else {
        cart.items[existingItemIndex].quantity = quantity;
      }
      
      // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
      if (cart.items.length === 0) {
        cart.restaurantId = null;
      }
      
      localStorage.setItem('cart', JSON.stringify(cart));
      return { success: true, cart };
    },
    
    removeItem: function(productId) {
      return this.updateQuantity(productId, 0);
    },
    
    clear: function() {
      localStorage.setItem('cart', JSON.stringify({ items: [], restaurantId: null }));
      return { success: true, cart: { items: [], restaurantId: null } };
    },
    
    getTotalPrice: function() {
      const cart = this.get();
      return cart.items.reduce((total, item) => total + (item.price * item.quantity), 0);
    },
    
    getTotalItems: function() {
      const cart = this.get();
      return cart.items.reduce((total, item) => total + item.quantity, 0);
    },
    
    checkout: async function(customerInfo) {
      const cart = this.get();
      
      if (cart.items.length === 0) {
        return { success: false, error: 'Your cart is empty' };
      }
      
      if (!cart.restaurantId) {
        return { success: false, error: 'No restaurant selected' };
      }
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const order = {
          customerName: customerInfo.name,
          customerPhone: customerInfo.phone || '',
          deliveryTime: customerInfo.deliveryTime || '30',
          status: 'new',
          totalAmount: this.getTotalPrice(),
          items: cart.items,
          restaurantId: cart.restaurantId,
          createdAt: new Date().toISOString()
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const newOrder = await db.orders.add(order);
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        this.clear();
        
        return { success: true, order: newOrder };
      } catch (error) {
        console.error('Error during checkout:', error);
        return { success: false, error: error.message };
      }
    }
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  statistics: {
    getDashboardStats: async function() {
      return await apiRequest('/statistics/dashboard');
    }
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
window.db = db;